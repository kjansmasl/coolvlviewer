## This is the Cool VL Viewer configuration file for Linux. It is sourced by
## the cool_vl_viewer wrapper script.

## NOTE: to make your settings permanent and avoid having to re-edit them each
## time you install a new viewer release, you may copy this file into the
## ~/.secondlife/ directory (this is therefore a per-Linux-account file) and
## modify it as you wish; when it exists, that file will be automatically
## sourced by the cool_vl_viewer wrapper script. You may also (as 'root') setup
## a system-wide configuration file (/etc/cool_vl_viewer.conf) if you need one
## to provide default settings to all the Linux accounts used on this computer.
## The default configuration is overriden by the system-wide configuration,
## itself overridden by the per-Linux-user configuration.

## If the viewer fails to properly detect the amount of VRAM on your graphics
## card, you may specify it (in megabytes) via this variable. This variable is
## also to be used for computers without any graphics card but with an APU or
## iGPU (that do not have any VRAM and instead make use of the CPU RAM).
#export LL_VRAM_MB=512

## Mesa drivers specific optimizations.

## NEVER sync to V-blank !!!  This slows down the whole viewer TREMENDOUSLY !
## To prevent tearing, ALWAYS prefer triple-buffering (which you can use when
## you have 256Mb or more VRAM) to ANY method of V-blank syncing (this includes
## any adaptative sync method, be it Freesync or G-sync).
## IMPORTANT NOTE: if you are using a compositor with your desktop, then it
## will likely override V-sync/V-blank control for all running applications and
## you will have to turn it off at the compositor configuration level...
export vblank_mode=0

## When on (=true), allows to use multi-threaded rendering at the driver level
## with Mesa, but it also increases the CPU usage. With a single-core CPU, it
## is definitely best to turn this off (set to false). With "auto", the wrapper
## script will automatically adjust to false (for mono-core CPUs) or true (for
## multi-cores ones).
export mesa_glthread=auto

## NVIDIA-specific optimizations. Check your driver documentation for ATI/AMD
## or Intel GPUs with proprietary drivers...

## NEVER sync to V-blank !!!  This slows down the whole viewer TREMENDOUSLY !
## To prevent tearing, ALWAYS prefer triple-buffering (which you can use when
## you have 256Mb or more VRAM) to ANY method of V-blank syncing (this includes
## any adaptative sync method, be it Freesync or G-sync).
## IMPORTANT NOTE: if you are using a compositor with your desktop, then it
## will likely override V-sync/V-blank control for all running applications and
## you will have to turn it off at the compositor configuration level...
export __GL_SYNC_TO_VBLANK=0

## When on (=1), allows to use multi-threaded rendering at the driver level
## with the newest drivers (v310+), but it also increases a lot the CPU usage
## (typically using one more processor core at 25 to 100%, depending on the CPU
## performances). The FPS gain will vary from 10 to 30%, with higher gains in
## more rendering intensive scenes, so it is a significant gain... for people
## with a quad-core CPU (dual-core CPUs will see a barely lower gain, but the
## viewer will use 100% of the CPU). With a single-core CPU, it's definitely
## best to turn this off (set to 0).
## With "auto", the wrapper script will automatically adjust to 0 (for mono-
## core CPUs) or 1 (for multi-cores ones).
export __GL_THREADED_OPTIMIZATIONS=auto

## Brings a slight speed increase with NVIDIA GPUs, at the cost of a slightly
## higher CPU usage...
export __GL_YIELD=NOTHING

## For faster viewer startup (at shaders compilation step) with NVIDIA cards
export __GL_SHADER_DISK_CACHE=1

## Other graphics settings.

## Un-comment to force the disabling of FreeSync and G-sync when, respectively,
## the vblank_mode or __GL_SYNC_TO_VBLANK variables are set to 0 above. Note:
## this may sometimes incur a startup delay in the wrapper script (multiple
## calls to xrandr and/or a call to nvidia-settings are performed). Enable only
## if you do use a FreeSync or G-sync display and the vblank settings do not
## suffice to disable its sync mode. No need to use export here.
#LL_AUTO_DISABLE_MONITOR_SYNC=1

## You may change the icon size used as the window icon with this setting. The
## default size is 48 (48x48 pixels). Available sizes are 32, 48, 64, 128, 256.
## Note that when LL_WINDOW_ICON_BPP below is set to cause the fallback to the
## SDL2 way of setting the window application icon, the size is forced to 32
## (i.e. LL_WINDOW_ICON_SIZE is ignored in this case).
#export LL_WINDOW_ICON_SIZE=64

## In case the viewer window icon is absent or appears corrupted on your system
## (bad color depth), you may uncomment this line and use 32, 24, 16 or 15 bits
## per pixel (32 being the default in the code, you will need to test 24, 16,
## and 15). Using an invalid number (e.g. 0) causes the viewer to fall back to
## SDL2's own function to set the window icon, which alas fails to set it for
## all sizes, such as for the left window title bar button (but at least, it
## should find the right color depth by itself). And please, do report the
## issue on the support forum !
#export LL_WINDOW_ICON_BPP=15

## This option is for using the window manager theme's cursors where possible,
## instead of the viewer-shipped cursors. Uncomment to enable.
#export LL_USE_SYSTEM_CURSORS=1

## This option is for disabling the splash screen on re-compilation of shaders.
## Uncomment to disable.
#export LL_DISABLE_SHADER_COMPILING_SPLASH=1

## Possible additional options(s) to pass to the viewer (this replaces the
## old gridargs.dat optionnal file). Such options are prepended to the options
## passed by the user to the cool_vl_viewer wrapper script as arguments. No
## need to use export here.
LL_SUP_OPT=""

## If you want the viewer, when configured to use the "system browser", to
## actually launch a different web browser than the one configured system-wide,
## you can override the "BROWSER" environment variable by uncommenting this
## line and editing it to match your preferred web browser. If present, "%s"
## will be subsituted with the URL, else the URL is appended to the $BROWSER
## value by the launcher script.
#export BROWSER="palemoon %s"

## OpenMP settings (used when the viewer is compiled with OpenMP support).

## Set this to the number of threads you want to use for OpenMP parallele
## tasks. if set to "auto", the number of threads will be made equal to the
## number of CPU cores available on the system.
export OMP_NUM_THREADS=auto

## Do not eat up all the CPU power waiting for wake up of OpenMP threads (which
## would happen should you set this to "ACTIVE" instead)...
export OMP_WAIT_POLICY="PASSIVE"

## Prevent OpenMP threads from migrating between cores.
export OMP_PROC_BIND=true

## Everything below this line is just for advanced troubleshooters.
##-------------------------------------------------------------------

## Avoid any conflict with system-wide preloaded libraries.
export LD_PRELOAD=""

## Uncommment to disable the use of GL stencil (trouble-shooting only)
#export LL_GL_NO_STENCIL=x

## Works around a problem with misconfigured 64 bits systems not finding GL
#export LIBGL_DRIVERS_PATH="$LIBGL_DRIVERS_PATH":/usr/lib64/dri:/usr/lib/dri

## Do not let glib use its own allocator, especially when we use jemalloc as
## ours...
export G_SLICE=always-malloc

## Limits the number of malloc() arenas to 2 times the number of CPU cores (SMT
## cores are accounted as two cores in Linux). This helps reducing memory usage
## and virtual address space fragmentation, while not impacting performances in
## practice; the threads used by the viewer are not time-critical and will not
## suffer much from memory allocation locks contentions. Beside, when the
## number of threads gets beyond the number of CPU cores, other types of much
## worst contentions occur (CPU pipelines, caches, etc) that have a much larger
## impact than memory allocation locks.
## NOTE: viewer builds using jemalloc should not be affected by this variable
## since jemalloc now (normally) overrides *both* malloc() and new().
export MALLOC_ARENA_MAX=2

## Uncomment to disable ANSI colouring of log lines on the console.
#export LL_NO_ANSI_COLOR=x

## Uncomment to redirect stderr to the log file: this allows to capture error
## or warning messages comming from the third parties libraries used by the
## viewer, at the cost of more spam in the log file).
## Note however that, when the viewer is launched from a terminal, the latter
## does not get any log line printed in it when this feature is enabled.
#export LL_REDIRECT_STDERR_TO_LOG=x

## This variable is for passing additional options to the CEF instances
## launched via the Dullahan plugin.
#export LL_CEF_OPTIONS=""

## Set to anything but an empty string to get a report on exit (success or
## crash and type of crash). No need to use export here.
LL_REPORT=""

## For advanced debugging cases, you can run the viewer under the control of
## another program, such as strace, gdb, or valgrind. No need to use export
## here.
LL_WRAPPER=""

## Uncomment this line and/or set this variable to any file name you wish to
## log to, in case you encounter issues launching the system browser from the
## viewer and want to diagnose it.
#export LL_LAUNCHER_LOGFILE="$HOME/.secondlife/logs/browser-launcher.log"

## These environment variables are normally populated (via the per-Linux-user
## ~/.secondlife/cool_vl_viewer.conf file) with the full path of the Windows
## SLVoice.exe binary inside the Wine prefix directory. See (and use) the
## install-wine-SLVoice.sh script to setup things properly.
#export WINEPREFIX=""
#export WINEDLLOVERRIDES="mscoree,mshtml="
#export WINEDEBUG="-all"
#export LL_WINE_SLVOICE=""
